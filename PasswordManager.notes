Password Manager:

Goal: The goal of this manager is to store passwords of different accounts so that
a user can retrieve any password he/she desires.


Example: 
1. User wants to retrieve password for his/her facebook
2. User logs into his password manager using a master password.
3. He types in the account he wants to get the password
4. Finally, it returns the desired password.


This Password manager can: 
- Generate a password for any account/service
- Retrieve passwords for a desired account
- Stores account data to a database


TODO:
[√] Generate passwords for users
[x] Simple terminal menu system 
[√] Save data into database (PostgreSQL)
[ ] Refactor code
[ ] Implement deleting an account
[√] Figure out how to not make new connectDB() method based on specific needs. e.g viewing db, inserting queries, etc



# Figure out how to not make new connectDB() method based on specific needs. e.g viewing db, inserting queries, etc

Have a boolean flag to indicate which method should be used


======================================================================================================================================

Terminal Menu System:

Welcome to PasswordManager!
1. Generate a password
2. Add account 
3. Delete account
4. View Account
4. Quit


[java]

public void menu() {

    Scanner menuInput = new Scanner(System.in); 
    while(true) {
        System.out.println("Welcome to PasswordManager");
        System.out.println("1. Generate a password");
        System.out.println("2. Add an account");
        System.out.println("3. Delete an account");
        System.out.println("4. Quit");

        int option = menuInput.nextInt();
        switch(option) {
            case 1: 
                // password
                // password  menu
                // 
                System.out.println("To generate a password input a length that is in the range of [8-12]");
                int passwordLength = menuOption.nextInt();
                
                if(isLengthAppropiate(passwordLength)) {
                    generatePassword();
                } else {
                    passwordMenu();
                }


                break;
            case 2: 
                // add an account
                break;
            case 3: 
                // delete an account
                break;
            case 4: 
                // quit

                break;
            default:
                System.out.println("Error.");
                menu();
        }

        
    
    }


}

[end]


-----------------------------------------------------------------------------
# Generating a password: 

Ask user for length of password. [min length = 8, max = 12] 

ALGORITHM FOR GENERATING PASSWORD:
[Not the most efficient way to generate a password]
Loop until length of desired password length:
Randomly:
- Select a character from the alphabet (a-z)
- Select a character from the alphabet (A-Z)
- Select a random number (0-9)
- Select a random special character (`! @#$%^&*()-_+={}[]|;:"<>,./?)
 
After we have generated a password we would like to save it to the clipboard
so when user wants to add an account they can use it for a password.

If user inputs a length that is < 8 and > 12 then ask for input of length again 

-----------------------------------------------------------------------------
# Add account

Prompt user to enter the type of account e.g facebook, snapchat
Then prompt user to enter a password

After user has entered the required data then save it to the database


service   |   password
hello.com     password101

Then it will ask user if they would like to add another account, otherwise 
exit back to main menu
------------------------------------------------------------------------------

# database
Create the database
Create the table

CREATE TABLE manager(
   ID          INT   PRIMARY KEY NOT NULL,
   SERVICE     TEXT  NOT NULL,
   LOGIN       TEXT  NOT NULL,
   PASSWORD    TEXT  NOT NULL
   
);



-----------------------------------------------------------------------------
